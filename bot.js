const axios = require('axios');
async function getImageBase64(url) {
 
   try{   // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤
      const response = await axios.get(url, { responseType: 'arraybuffer' });
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É Base64
      const base64Image = Buffer.from(response.data, 'binary').toString('base64');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É Base64
      return base64Image;
   }catch{
    return "";
   }
}
const { initializeApp } = require("firebase/app");
const { getDatabase, ref, set, get, child } = require("firebase/database");
const firebaseConfig = {
  apiKey: "AIzaSyBEuWHhTt7YD-3_vOXlVdu0LzTm4e95rm0",
  authDomain: "rocketvoy.firebaseapp.com",
  databaseURL: "https://rocketvoy-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "rocketvoy",
  storageBucket: "rocketvoy.appspot.com",
  messagingSenderId: "363023542878",
  appId: "1:363023542878:web:210264407ad5dfe111a2cf",
  measurementId: "G-SD6ZYT9NQD"
};
const app = initializeApp(firebaseConfig);
const database = getDatabase(app); 
const TelegramBot = require('node-telegram-bot-api');
const token = '7263383930:AAFbnbLiDhxM1eL3DrL6KGPjqjzOZyPiA_c';
const bot = new TelegramBot(token, { polling: true });
const webAppUrl = 'https://t.me/RocketVoyBot/game';
async function saveUserToFirebase(id,url) {
  const imageBase64_1 = await getImageBase64(url);

  const userRef = ref(database, 'photos/'+id); 
    set(userRef,imageBase64_1)

  }
  bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const command = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    if (command) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "inv" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID
        if (command.startsWith('inv')) {
            const id1 = command.slice(4); // –£–±–∏—Ä–∞–µ–º 'inv' –∏ –ø—Ä–æ–±–µ–ª, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ ID
            await handleInvCommand(id1, userId, chatId); // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return;
        }
    } 
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inv
async function handleInvCommand(id1, userId, chatId) {
    const userRef = ref(database, `users/${id1}`);

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è id1 –≤ users
        const userSnapshot = await get(userRef);
        
        if (!userSnapshot.exists()) {
            bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id1} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.`);
            console.log(`User ID ${id1} not found. Cannot add friend.`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è userId –≤ friends
        const friendRef = ref(database, `users/${id1}/friends/${userId}`);
        const friendSnapshot = await get(friendRef);

        if (friendSnapshot.exists()) {
            console.log(`User ID ${userId} already exists under code ${id1}. No action taken.`);
            bot.sendMessage(chatId, `–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${id1}.`);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º userId –≤ friends
            await set(friendRef, "1"); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "1" –¥–ª—è userId
            console.log(`User ID ${userId} saved successfully under code ${id1}.`);
            bot.sendMessage(chatId, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ +3 Star Vouchers!`);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è.");
    }
}
  bot.onText(/\/start(?: (\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userName = msg.from.username
    const userId = msg.from.id;
    const code = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    await saveUserToFirebase(userId, await getAvatarUrl(userId));
    // –ï—Å–ª–∏ –∫–æ–¥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (code) {
      const userRef = ref(database, `users/${code}/friends/${userId}`);
  
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç userId
        const snapshot = await get(userRef);
        
        if (snapshot.exists()) {
          console.log(`User ID ${userId} already exists under code ${code}. No action taken.`);
        } else {
          // –ï—Å–ª–∏ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
          await set(userRef, "0");
          console.log(`User ID ${userId} saved successfully under code ${code}.`);
        }
      } catch (error) {
        console.error("Error checking or saving user ID:", error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π PLAY
    bot.sendMessage(chatId, "Get ready for the challenge! Time to react quickly and decisively to survive in this dangerous space. Collect stars and prove that you are the best pilot in the galaxy!", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'PLAYüöÄ', url: "https://t.me/RocketVoyBot/game?name="+userName+"&id="+userId+"&url=23" },
            { text: 'Community', url: "https://t.me/rocketvoy" }  // –ö–Ω–æ–ø–∫–∞ PLAY
          ]
        ]
      }
    });
  });

  async function getAvatarUrl(userId) {
    try {
      const userPhotos = await bot.getUserProfilePhotos(userId);

      if (userPhotos.total_count > 0) {
          // –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (–æ–Ω–æ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
          const largestPhoto = userPhotos.photos[0].pop(); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
          const file = await bot.getFile(largestPhoto.file_id);
          return `https://api.telegram.org/file/bot${token}/${file.file_path}`;
      } else {
          return null;
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
      return null;
  }
}

setInterval(updateHighestScores, 5000);
async function updateHighestScores() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é users
    const usersRef = ref(database, 'users');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const snapshot = await get(usersRef);
    if (snapshot.exists()) {
      const users = snapshot.val();

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const userArray = Object.keys(users).map((id) => ({
        name: users[id].name,
        coins: users[id].coins, // coins –æ—Å—Ç–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        id: id, // coins –æ—Å—Ç–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      }));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –ø–æ–ª—é coins (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
      userArray.sort((a, b) => parseInt(b.coins) - parseInt(a.coins));

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /highest_scores
      const highestScoresRef = ref(database, 'highest_scores');
      await set(highestScoresRef, userArray); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤

      console.log("Successfully updated highest scores!");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const checkSnapshot = await get(highestScoresRef);
      console.log("Highest scores data:", checkSnapshot.val());
    } else {
      console.log("No data available in users directory.");
    }
  } catch {
    return null
  }
}
async function updateFriendsData() {
  const database = getDatabase();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const usersRef = ref(database, 'users');
    const usersSnapshot = await get(usersRef);

    if (usersSnapshot.exists()) {
      const users = usersSnapshot.val();

      // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
      for (const userId in users) {
        const userFriendsRef = ref(database, `users/${userId}/friends`);
        const userFriendsSnapshot = await get(userFriendsRef);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–∑—å—è —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userFriendsSnapshot.exists()) {
          const friends = userFriendsSnapshot.val();

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ name:coins
          const friendsData = {};

          // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –¥—Ä—É–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          for (const friendId in friends) {
            try {
              const friendRef = ref(database, `users/${friendId}`);
              const friendSnapshot = await get(friendRef);

              // –ï—Å–ª–∏ –¥—Ä—É–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
              if (friendSnapshot.exists()) {
                const friendData = friendSnapshot.val();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ name:coins
                friendsData[friendData.name] = friendData.coins;
              }
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∞ —Å ID ${friendId}:`, error);
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
              continue;
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π –≤ –ø–æ–¥—Ç–∞–±–ª–∏—Ü–µ friends1 —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            const userFriends1Ref = ref(database, `users/${userId}/friends1`);
            await set(userFriends1Ref, friendsData);
            console.log(`–î–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
          }
        }
      }
    } else {
      console.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ users.");
    }
  } catch (error) {
    return null;
  }
}

setInterval(updateFriendsData, 10000);

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');


